# File: .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
    test:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ['3.11']

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}

        - name: Cache pip dependencies
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-


        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov black flake8

        - name: Lint with flake8
          run: |
            # Stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # Exit-zero treats all errors as warnings
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

        - name: Format check with black
          run: |
            black --check --diff .

        - name: Set up Node.js and MCP tools
          uses: actions/setup-node@v4
          with:
            node-version: ${{ env.NODE_VERSION }}

        - name: Install MCP servers
          run: |
            npm install -g @modelcontextprotocol/server-filesystem @playwright/mcp

        - name: Set up .env file
          run: |
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "OPENAI_API_BASE=${{ secrets.OPENAI_API_BASE }}" >> .env
            echo "OPENAI_API_VERSION=${{ secrets.OPENAI_API_VERSION }}" >> .env
            echo "OPENAI_DEPLOYMENT_MODEL=${{ secrets.OPENAI_DEPLOYMENT_MODEL }}" >> .env

        - name: Run cleanup
          run: python backend/scripts/clean_logs.py

        - name: Run unit tests
          run: pytest backend/tests

        - name: Run orchestrator (dry run)
          run: python backend/orchestrator.py

        - name: Upload test artifacts
          uses: actions/upload-artifact@v4
          with:
            name: test-results
            path: |
              fs_files/**/*.md
              fs_files/**/*.txt
              fs_files/screenshots/
              fs_files/logs/

    security: 
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Run security checks with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

    build:
      runs-on: ubuntu-latest
      needs: [test, security]
      steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check package
        run: |
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/